#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

import gtk
import pygtk
pygtk.require('2.0')

import getopt
import getpass
import subprocess
import sys

class Blexit(gtk.Window):
    """A dialog offering the user to log out, suspend, reboot or shut down."""

    def __init__(self):
        gtk.Window.__init__(self)
        self.set_title("Log out " + getpass.getuser() + "? Choose an option:")
        self.set_border_width(5)
        self.set_size_request(500, 80)
        self.set_resizable(False)
        self.set_keep_above(True)
        self.stick
        self.set_position(gtk.WIN_POS_CENTER)
        self.connect("delete_event", gtk.main_quit)
        windowicon = self.render_icon(gtk.STOCK_QUIT, gtk.ICON_SIZE_DIALOG)
        self.set_icon(windowicon)

        # Default error_messages dict
        # key = result from _can_do_it
        # value = string shown in error_message_dialog
        self._error_messages = dict(
            no="Action is not allowed.",
            na="Action is not available.",
            challenge="Action is not authorized."
        )

        # Cancel key (Escape)
        accelgroup = gtk.AccelGroup()
        key, mod = gtk.accelerator_parse('Escape')
        accelgroup.connect_group(key, mod, gtk.ACCEL_VISIBLE, gtk.main_quit)
        self.add_accel_group(accelgroup)

        self._construct_ui()

    def _construct_ui(self):
        self._button_box = gtk.HBox()
        self._add_button(stock=gtk.STOCK_CANCEL, action=self._cancel_action)
        self._add_button(label="_Log out", action=self._logout_action)
        self._add_button(label="_Suspend", action=self._suspend_action)
        self._add_button(label="H_ibernate", action=self._hibernate_action)
        self._add_button(label="Re_boot", action=self._reboot_action)
        self._add_button(label="_Power off", action=self._shutdown_action)

        self._status = gtk.Label()
        label_box = gtk.HBox()
        label_box.pack_start(self._status)

        vbox = gtk.VBox()
        vbox.pack_start(self._button_box)
        vbox.pack_start(label_box)

        self.add(vbox)
        self.show_all()

    def main(self):
        gtk.main()

    def _add_button(self, action, label=None, stock=None):
        if stock is not None:
            button = gtk.Button(stock=stock)
        else:
            button = gtk.Button(label=label)
        button.set_border_width(4)
        button.connect("clicked", action)
        self._button_box.pack_start(button)

    def _disable_buttons(self):
        self._button_box.foreach(lambda button: button.set_sensitive(False))

    def _cancel_action(self, button):
        self._disable_buttons()
        gtk.main_quit()

    def _logout_action(self, button):
        self._disable_buttons()
        self._status.set_label("Exiting Openbox, please standby...")
        try:
            subprocess.check_output(["openbox", "--exit"])
        except subprocess.CalledProcessError as e:
            emDialog = gtk.MessageDialog(parent=None, flags=0, type=gtk.MESSAGE_INFO,
                                         buttons=gtk.BUTTONS_OK, message_format=None)
            if emDialog:
                emDialog.set_markup(e.output)
                emDialog.run()
        finally:
            gtk.main_quit()

    def _suspend_action(self, button):
        self._disable_buttons()
        self._status.set_label("Suspending, please standby...")
        self._action_string = "Suspend"
        self._do_it()
        gtk.main_quit()

    def _hibernate_action(self, button):
        self._disable_buttons()
        self._status.set_label("Hibernating, please standby...")
        self._action_string = "Hibernate"
        self._error_messages["na"] = """Action is not available. 

Probable cause is inadequate swap space."""
        self._do_it()
        gtk.main_quit()

    def _reboot_action(self, button):
        self._disable_buttons()
        self._status.set_label("Rebooting, please standby...")
        self._action_string = "Reboot"
        self._do_it()
        gtk.main_quit()

    def _shutdown_action(self, button):
        self._disable_buttons()
        self._status.set_label("Shutting down, please standby...")
        self._action_string = "PowerOff"
        self._do_it()
        gtk.main_quit()

    def _can_do_it(self):
        action_method = "Can{}".format(self._action_string)
        try:
            response = subprocess.check_output(["dbus-send", "--print-reply", "--system",
                                                "--dest=org.freedesktop.login1",
                                                "/org/freedesktop/login1",
                                                "org.freedesktop.login1.Manager.{}".format(action_method) ])
            if response:
                lines = response.split("\n")
                if lines:
                    words = lines[1].split("\"")
                    if words:
                        if words[1]:
                            return words[1]
                        return None
        except:
            pass

    def _do_it(self):
        try:
            candoit = self._can_do_it()
            if candoit == "yes":
                send_dbus(self._action_string)
            else:
                emDialog = gtk.MessageDialog(parent=None, flags=0, type=gtk.MESSAGE_INFO,
                                             buttons=gtk.BUTTONS_OK, message_format=None)
                emDialog.set_markup(self._error_messages[candoit])
                emDialog.run()
        except:
            pass

def send_dbus(method):
    try:
        subprocess.call(["dbus-send", "--print-reply", "--system", "--dest=org.freedesktop.login1",
                        "/org/freedesktop/login1", "org.freedesktop.login1.Manager.{}".format(method),
                         "boolean:true"])
    except subprocess.CalledProcessError as e:
        emDialog = gtk.MessageDialog(parent=None, flags=0, type=gtk.MESSAGE_INFO,
                                     buttons=gtk.BUTTONS_OK, message_format=None)
        if emDialog:
            emDialog.set_markup(e.output)
            emDialog.run()

def print_usage(status):
    print ("bl-exit: usage:\n" \
        "  -h, --help      show this message and exit\n" \
        "  -l, --logout    log out from openbox\n" \
        "  -s, --suspend   suspend the system\n" \
        "  -i, --hibernate hibernate the system\n" \
        "  -r, --reboot    reboot the system\n" \
        "  -p, --poweroff  power the system down")
    sys.exit(status)

def main(argv):
    try:
        opts, args = getopt.getopt(argv, "hlsrp", ["help","logout","suspend","reboot","poweroff"])
    except getopt.GetoptError:
        print_usage(1)
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            print_usage(0)
        elif opt in ("-l", "--logout"):
            logout()
            sys.exit(0)
        elif opt in ("-s", "--suspend"):
            suspend()
            sys.exit(0)
        elif opt in ("-r", "--reboot"):
            reboot()
            sys.exit(0)
        elif opt in ("-p", "--poweroff"):
            poweroff()
            sys.exit(0)

    Blexit().main()

if __name__ == "__main__":
    main(sys.argv[1:])
